{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nanda\\\\Documents\\\\GitHub\\\\crypto-react-app\\\\src\\\\components\\\\Chart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Box } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Chart = _ref => {\n  let {\n    arr = [],\n    currency,\n    days\n  } = _ref;\n  const prices = [];\n  const date = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (days === \"24h\") date.push(new Date(arr[i][0]).toLocaleTimeString());else date.push(new Date(arr[i][0]).toLocaleDateString());\n    prices.push(arr[i][1]);\n  }\n  const data = {\n    label: `price in ${currency}`,\n    data: prices,\n    borderColor: 'rgb(255,99,132)',\n    backgroundColor: 'rgba(255,99,132,0.5)'\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: '100%',\n    height: ['100vh', 'min-content'],\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      height: ['full'],\n      width: 'full',\n      options: {\n        responsive: true\n      },\n      data: {\n        labels: date,\n        datasets: [data]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Box","jsxDEV","_jsxDEV","register","_ref","arr","currency","days","prices","date","i","length","push","Date","toLocaleTimeString","toLocaleDateString","data","label","borderColor","backgroundColor","width","height","children","options","responsive","labels","datasets","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nanda/Documents/GitHub/crypto-react-app/src/components/Chart.jsx"],"sourcesContent":["import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js'\r\nimport { Box } from '@chakra-ui/react';\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\nconst Chart = ({ arr = [], currency, days }) => {\r\n    const prices = [];\r\n    const date = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (days === \"24h\")\r\n            date.push(new Date(arr[i][0]).toLocaleTimeString());\r\n        else\r\n            date.push(new Date(arr[i][0]).toLocaleDateString());\r\n        prices.push(arr[i][1]);\r\n\r\n    }\r\n    const data = {\r\n        label: `price in ${currency}`,\r\n        data: prices,\r\n        borderColor: 'rgb(255,99,132)',\r\n        backgroundColor: 'rgba(255,99,132,0.5)',\r\n    };\r\n    return (\r\n        <Box width={'100%'} height={['100vh', 'min-content']}>\r\n            <Line\r\n                height={['full']}\r\n                width={'full'}\r\n                options={{\r\n                    responsive: true,\r\n                }}\r\n                data={{\r\n                    labels: date,\r\n                    datasets: [\r\n                        data\r\n                    ]\r\n                }}\r\n            />\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Chart"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAC1H,SAASC,GAAG,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvCV,OAAO,CAACW,QAAQ,CACZV,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AACD,MAAMR,KAAK,GAAGa,IAAA,IAAkC;EAAA,IAAjC;IAAEC,GAAG,GAAG,EAAE;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAAH,IAAA;EACvC,MAAMI,MAAM,GAAG,EAAE;EACjB,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACjC,IAAIH,IAAI,KAAK,KAAK,EACdE,IAAI,CAACG,IAAI,CAAC,IAAIC,IAAI,CAACR,GAAG,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACI,kBAAkB,CAAC,CAAC,CAAC,CAAC,KAEpDL,IAAI,CAACG,IAAI,CAAC,IAAIC,IAAI,CAACR,GAAG,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,kBAAkB,CAAC,CAAC,CAAC;IACvDP,MAAM,CAACI,IAAI,CAACP,GAAG,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAE1B;EACA,MAAMM,IAAI,GAAG;IACTC,KAAK,EAAG,YAAWX,QAAS,EAAC;IAC7BU,IAAI,EAAER,MAAM;IACZU,WAAW,EAAE,iBAAiB;IAC9BC,eAAe,EAAE;EACrB,CAAC;EACD,oBACIjB,OAAA,CAACF,GAAG;IAACoB,KAAK,EAAE,MAAO;IAACC,MAAM,EAAE,CAAC,OAAO,EAAE,aAAa,CAAE;IAAAC,QAAA,eACjDpB,OAAA,CAACZ,IAAI;MACD+B,MAAM,EAAE,CAAC,MAAM,CAAE;MACjBD,KAAK,EAAE,MAAO;MACdG,OAAO,EAAE;QACLC,UAAU,EAAE;MAChB,CAAE;MACFR,IAAI,EAAE;QACFS,MAAM,EAAEhB,IAAI;QACZiB,QAAQ,EAAE,CACNV,IAAI;MAEZ;IAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAAC,EAAA,GAlCKxC,KAAK;AAoCX,eAAeA,KAAK;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}